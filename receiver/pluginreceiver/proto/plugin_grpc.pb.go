// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PluginServiceClient is the client API for PluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginServiceClient interface {
	Run(ctx context.Context, in *PluginRequest, opts ...grpc.CallOption) (PluginService_RunClient, error)
}

type pluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginServiceClient(cc grpc.ClientConnInterface) PluginServiceClient {
	return &pluginServiceClient{cc}
}

func (c *pluginServiceClient) Run(ctx context.Context, in *PluginRequest, opts ...grpc.CallOption) (PluginService_RunClient, error) {
	stream, err := c.cc.NewStream(ctx, &PluginService_ServiceDesc.Streams[0], "/opentelemetry.proto.collector.plugin.v1.PluginService/run", opts...)
	if err != nil {
		return nil, err
	}
	x := &pluginServiceRunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PluginService_RunClient interface {
	Recv() (*PluginResponse, error)
	grpc.ClientStream
}

type pluginServiceRunClient struct {
	grpc.ClientStream
}

func (x *pluginServiceRunClient) Recv() (*PluginResponse, error) {
	m := new(PluginResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PluginServiceServer is the server API for PluginService service.
// All implementations must embed UnimplementedPluginServiceServer
// for forward compatibility
type PluginServiceServer interface {
	Run(*PluginRequest, PluginService_RunServer) error
	mustEmbedUnimplementedPluginServiceServer()
}

// UnimplementedPluginServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPluginServiceServer struct {
}

func (UnimplementedPluginServiceServer) Run(*PluginRequest, PluginService_RunServer) error {
	return status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedPluginServiceServer) mustEmbedUnimplementedPluginServiceServer() {}

// UnsafePluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServiceServer will
// result in compilation errors.
type UnsafePluginServiceServer interface {
	mustEmbedUnimplementedPluginServiceServer()
}

func RegisterPluginServiceServer(s grpc.ServiceRegistrar, srv PluginServiceServer) {
	s.RegisterService(&PluginService_ServiceDesc, srv)
}

func _PluginService_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PluginRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PluginServiceServer).Run(m, &pluginServiceRunServer{stream})
}

type PluginService_RunServer interface {
	Send(*PluginResponse) error
	grpc.ServerStream
}

type pluginServiceRunServer struct {
	grpc.ServerStream
}

func (x *pluginServiceRunServer) Send(m *PluginResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PluginService_ServiceDesc is the grpc.ServiceDesc for PluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opentelemetry.proto.collector.plugin.v1.PluginService",
	HandlerType: (*PluginServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "run",
			Handler:       _PluginService_Run_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/plugin.proto",
}
